Attribute VB_Name = "Module2"
Option Explicit

Public Const MAX_PATH = 260
 'API's Function Declarations
Private Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal lpBuffer As String, nSize As Long) As Long
Private Declare Function GetWindowsDirectory Lib "kernel32.dll" Alias "GetWindowsDirectoryA" (ByVal lpBuffer As String, ByVal nSize As Long) As Long

 Private Declare Function IsWindow Lib "user32" (ByVal HWnd As Long) As Long
Private Declare Function InternetGetConnectedState _
Lib "wininet.dll" (ByRef lpdwFlags As Long, _
ByVal dwReserved As Long) As Long

'Local system uses a modem to connect to the Internet.
Private Const INTERNET_CONNECTION_MODEM As Long = &H1
'Local system uses a LAN to connect to the Internet.
Private Const INTERNET_CONNECTION_LAN As Long = &H2
'Local system uses a proxy server to connect to the Internet.
Private Const INTERNET_CONNECTION_PROXY As Long = &H4
'
Private Const INTERNET_CONNECTION_MODEM_BUSY As Long = &H8
Private Const INTERNET_RAS_INSTALLED As Long = &H10
Private Const INTERNET_CONNECTION_OFFLINE As Long = &H20
Private Const INTERNET_CONNECTION_CONFIGURED As Long = &H40


 Private Declare Function GetWindowLong Lib "user32" Alias "GetWindowLongA" ( _
    ByVal HWnd As Long, _
    ByVal nIndex As Long) As Long


 Private Declare Function PostMessage Lib "user32" Alias "PostMessageA" ( _
    ByVal HWnd As Long, _
    ByVal wMsg As Long, _
    ByVal wParam As Long, _
    ByVal lParam As Long) As Long


 Public Declare Function FindWindow Lib "user32" Alias "FindWindowA" ( _
    ByVal lpClassName As Any, _
    ByVal lpWindowName As String) As Long


 'API Constants

 Public Const GWL_STYLE = -16

 Public Const WS_DISABLED = &H8000000

 Public Const WM_CANCELMODE = &H1F

 Public Const WM_CLOSE = &H10

Public Function FindWindowHandle(Caption As String) As Long
  FindWindowHandle = FindWindow(vbNullString, Caption)
End Function


 Public Function IsTaskRunning(sWindowName As String) As Boolean
    Dim HWnd As Long, hWndOffline As Long
   
    On Error GoTo IsTaskRunning_Eh
    'get handle of the application
    'if handle is 0 the application is currently not running
    HWnd = FindWindow(0&, sWindowName)
    If HWnd = 0 Then
        IsTaskRunning = False
        Exit Function
    Else
        IsTaskRunning = True
    End If
   

IsTaskRunning_Exit:
        Exit Function


IsTaskRunning_Eh:
    Call ShowError(sWindowName, "IsTaskRunning")

 End Function


 Public Function EndTask(sWindowName As String) As Integer
    Dim x As Long, ReturnVal As Long, TargetHwnd As Long
   
    'find handle of the application
    TargetHwnd = FindWindow(0&, sWindowName)
    If TargetHwnd = 0 Then Exit Function
   
    If IsWindow(TargetHwnd) = False Then
        GoTo EndTaskFail
    Else
    'close application
        If Not (GetWindowLong(TargetHwnd, GWL_STYLE) And WS_DISABLED) Then
            x = PostMessage(TargetHwnd, WM_CLOSE, 0, 0&)
            DoEvents
        End If
    End If
   
    GoTo EndTaskSucceed


EndTaskFail:
    ReturnVal = False
    MsgBox "EndTask: cannot terminate " & sWindowName & " task"
    GoTo EndTaskEndSub


EndTaskSucceed:
    ReturnVal = True


EndTaskEndSub:
    EndTask% = ReturnVal

 End Function


 Public Function ShowError(sText As String, sProcName As String)
   'this function displays an error that occurred
   
    Dim sMsg As String
    sMsg = "Error # " & Str(Err.Number) & " was generated by " _
         & Err.Source & vbCrLf & Err.Description
    MsgBox sMsg, vbCritical, sText & Space(1) & sProcName
    Exit Function


 End Function
Public Function IsNetConnectViaLAN() As Boolean
    Dim dwflags As Long
    'pass an empty varialbe into which the API will
    'return the flags associated with the connection
    Call InternetGetConnectedState(dwflags, 0&)
    'return True if the flags indicate a LAN connection
    IsNetConnectViaLAN = dwflags And INTERNET_CONNECTION_LAN
End Function

Public Function IsNetConnectViaModem() As Boolean
    Dim dwflags As Long
    'pass an empty varialbe into which the API will
    'return the flags associated with the connection
    Call InternetGetConnectedState(dwflags, 0&)
    'return True if the flags indicate a modem connection
    IsNetConnectViaModem = dwflags And INTERNET_CONNECTION_MODEM
End Function

Public Function IsNetConnectViaProxy() As Boolean
    Dim dwflags As Long
    'pass an empty varialbe into which the API will
    'return the flags associated with the connection
    Call InternetGetConnectedState(dwflags, 0&)
    'return True if the flags indicate a proxy connection
    IsNetConnectViaProxy = dwflags And INTERNET_CONNECTION_PROXY
End Function

Public Function IsNetConnectOnline() As Boolean
    'no flags needed here - the API returns  True
    'if there is a connection of any type
    IsNetConnectOnline = InternetGetConnectedState(0&, 0&)
End Function

Public Function IsNetRASInstalled() As Boolean
    Dim dwflags As Long
    'pass an empty varialbe into which the API will
    'return the flags associated with the connection
    Call InternetGetConnectedState(dwflags, 0&)
    'return True if the falgs include RAS installed
    IsNetRASInstalled = dwflags And INTERNET_RAS_INSTALLED
End Function

Public Function GetNetConnectString() As String
    Dim dwflags As Long
    Dim msg As String
    'build a string for display
    If InternetGetConnectedState(dwflags, 0&) Then
        If dwflags And INTERNET_CONNECTION_CONFIGURED Then
            msg = msg & "You have a network connection configured." & vbCrLf
        End If

        If dwflags And INTERNET_CONNECTION_LAN Then
            msg = msg & "The local system connects To the Internet via a LAN"
        End If

        If dwflags And INTERNET_CONNECTION_PROXY Then
            msg = msg & ", and uses a proxy server. "
        Else: msg = msg & "."
        End If

        If dwflags And INTERNET_CONNECTION_MODEM Then
            msg = msg & "The local system uses a modem To connect to the Internet. "
        End If

        If dwflags And INTERNET_CONNECTION_OFFLINE Then
            msg = msg & "The connection is currently offline. "
        End If

        If dwflags And INTERNET_CONNECTION_MODEM_BUSY Then
            msg = msg & "The local system's modem is busy With a non-Internet connection. "
        End If

        If dwflags And INTERNET_RAS_INSTALLED Then
            msg = msg & "Remote Access Services are installed On this system."
        End If
    Else
        msg = "Not connected To the internet now."
    End If
    GetNetConnectString = msg
End Function
Public Function GetTheComputerName() As String

    On Error GoTo ErrorHandler

    Dim strComputerName As String ' Variable to return the path of computer name
    
    strComputerName = Space(250) ' Initilize the buffer to receive the string
    GetComputerName strComputerName, Len(strComputerName)
    strComputerName = Mid(Trim$(strComputerName), 1, Len(Trim$(strComputerName)) - 1)
    GetTheComputerName = strComputerName

    Exit Function
 
ErrorHandler:
    Err.Raise Err.Number, Err.Source & "/Utils.GetTheComputerName", Err.Description

End Function

' ================================================================================
' Routine:              GetTheWindowsDirectory
' Description:
' Algorithm:
' Parameters:           None
' Returns:
' ================================================================================
Public Function GetTheWindowsDirectory() As String

    On Error GoTo ErrorHandler
    
    Dim strWindowsDir As String        ' Variable to return the path of Windows Directory
    Dim lngWindowsDirLength As Long    ' Variable to return the the lenght of the path
    
    strWindowsDir = Space(250)         ' Initilize the buffer to receive the string
    lngWindowsDirLength = GetWindowsDirectory(strWindowsDir, 250) ' Read the path of the windows directory
    strWindowsDir = Left(strWindowsDir, lngWindowsDirLength) ' Extract the windows path from the buffer
    
    GetTheWindowsDirectory = strWindowsDir

    Exit Function
 
ErrorHandler:
    Err.Raise Err.Number, Err.Source & "/Utils.GetTheWindowsDirectory", Err.Description

End Function
Public Function GetSystemDrive() As String
    GetSystemDrive = Space(1000)
    Call GetWindowsDirectory(GetSystemDrive, Len(GetSystemDrive))
    GetSystemDrive = Left$(GetSystemDrive, 2)
End Function
Public Function GetWinPath()
Dim strFolder As String
Dim lngResult As Long
strFolder = String(MAX_PATH, 0)
lngResult = GetWindowsDirectory(strFolder, MAX_PATH)
If lngResult <> 0 Then
    GetWinPath = Left(strFolder, InStr(strFolder, _
    Chr(0)) - 1)
Else
    GetWinPath = ""
End If
End Function
Public Function getip()
Dim IPConfig As Variant
Dim IPConfigSet As Object

Set IPConfigSet = GetObject("winmgmts:{impersonationLevel=impersonate}").ExecQuery("SELECT IPAddress FROM Win32_NetworkAdapterConfiguration WHERE IPEnabled = TRUE")

For Each IPConfig In IPConfigSet
 If Not IsNull(IPConfig.IPAddress) Then FormMain.Text1 = GetTheComputerName & "ip;" & IPConfig.IPAddress(0)
Next IPConfig
End Function
